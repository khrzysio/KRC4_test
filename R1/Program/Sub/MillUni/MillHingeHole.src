&ACCESS RVO1
&REL 43
DEF MillHingeHole(stHole:IN)
   ;FOLD DECL
      DECL ST_Dim3 stHole
      DECL E_ProfileType eProfileType
      DECL POS xHole,xAboveProfile,xAboveTable
      DECL POS xWall[2],xAboveWall[2],xInsideWall[2]
      DECL POS xCutPath[2,80]
      DECL INT iWall,iPoint
      DECL REAL rHoleDepth
   ;ENDFOLD (DECL)
   ;FOLD INI
      ;Get data from ProcessData structure
      eProfileType = gstProcessData.eProfileType
      
      ;Hole center
      xHole = $NULLFRAME
      xHole.x = stHole.rX
      xHole.y = stHole.rY
      xHole.z = ProfileWallDist(eProfileType,#Z,1)
      
      ;Above profile
      xAboveProfile = xAboveProfileOffset:xHole
      
      ;Above table, safe height
      xAboveTable = xHole
      xAboveTable.Z = grAboveHoldersZ
      
      rHoleDepth = ABS(xInsideWallOffset.z)
      FOR iWall=1 TO iWallSize STEP 1
         ;Wall hole ceter
         xWall[iWall] = xHole
         xWall[iWall].z = ProfileWallDist(eProfileType,#Z,iWall)
         ;Wall milling start, end points
         xAboveWall[iWall] = xAboveWallOffset:xWall[iWall]
         xInsideWall[iWall] = xInsideWallOffset:xWall[iWall]
         ;Get path of spiral motion         
         GetSpiralPath(xWall[iWall],rHoleDiameter[iWall],rHoleDepth,xCutPath[,],iWall)
      ENDFOR
   ;ENDFOLD (INI)
   
   SetBaseTool(#MillTable,#Cutter8)
   
   Spindle(#WaitForRpmReached,#SpindleHsd)
   
   SetVel(#Idle)
   LIN xAboveTable C_DIS
   LIN xAboveProfile C_DIS
   
   FOR iWall=1 TO iWallSize STEP 1 
      ;Preparation for milling
      SetVel(#SpindleIdle)
      LIN xAboveWall[iWall] C_DIS
      LIN xCutPath[iWall,1]
      
      ;Spiral wall milling
      SetVel(#MillHingeHole)
      FOR iPoint=2 TO (iCutPathSize-2) STEP 1
         LIN xCutPath[iWall,iPoint] C_DIS
      ENDFOR
      CIRC xCutPath[iWall,(iCutPathSize-1)],xCutPath[iWall,iCutPathSize], CA 400
      
      ;End of milling
      SetVel(#SpindleIdle)
      LIN xInsideWall[iWall] C_DIS
   ENDFOR
   
   SetVel(#Idle)
   LIN xAboveProfile C_DIS
   LIN xAboveTable C_DIS
   
END

DEF GetSpiralPath(xHole:IN,rDiameter:IN,rPocketDepth:IN,xCutPath[]:OUT,iWall:IN)
   ;FOLD DECL
      DECL POS xHole,xCutPath[,]
      DECL REAL rDiameter,rPocketDepth,rPathRadius
      DECL REAL rDepthStep,rDistX,rDistY
      DECL REAL rAngle,rAngleLimit,rAngleStep
      DECL INT iPoint,iWall
   ;ENDFOLD (DECL)
   ;FOLD INI
      rAngleLimit = 2160
      rAngleStep = rAngleLimit/(iCutPathSize-3)
      rDepthStep = rPocketDepth/(iCutPathSize-3)
      rPathRadius = (rDiameter-grFiCutter8)/2
   ;ENDFOLD (INI)
   
   FOR iPoint=1 TO iCutPathSize STEP 1
      
      ;Milling path initialization
      xCutPath[iWall,iPoint] = xHole
      
      ;Current angle
      rAngle = (iPoint-1) * rAngleStep
      ;Offset in XY plane
      rDistX = rPathRadius * COS(rAngle)
      rDistY = rPathRadius * SIN(rAngle)
      
      ;XY plane coordinates
      xCutPath[iWall,iPoint].x = xHole.x + rDistX
      xCutPath[iWall,iPoint].y = xHole.y + rDistY
      
      ;Current point depth
      IF iPoint<=(iCutPathSize-2) THEN
         ;Spiral path
         xCutPath[iWall,iPoint].z = xHole.z - (iPoint-1)*rDepthStep
      ELSE
         ;Max hole depth for CIRC finishing
         xCutPath[iWall,iPoint].z = xHole.z - rPocketDepth
      ENDIF
      
   ENDFOR
   
END